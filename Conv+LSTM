# ****************************************************
# Keras - Theano LSTM + Conv Layer Implementation of
# Sentiment Analysis on IMDb Movie Review Data.
#
# Rahul Dominic - 29 October 2016
# ****************************************************

# Imports
import numpy
from keras.datasets import imdb
from keras.models import Sequential
from keras.layers import Convolution1D
from keras.layers import MaxPooling1D
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import LSTM
from keras.layers.embeddings import Embedding
from keras.preprocessing import sequence

# Seed numpy with random number
seed = 8
numpy.random.seed(8)

# Load dataset with the top 8000 words ranked by occurances.
# Rest of the words set to zero.
vocab_size = 8000
(X_train, Y_train), (X_test, Y_test) = imdb.load_data(nb_words=vocab_size)

# Pad the training and testing data
review_length = 400
X_train = sequence.pad_sequences(X_train, maxlen=review_length)
X_test = sequence.pad_sequences(X_test, maxlen=review_length)

# Creating model stack
embedding_vector_length = 64
model = Sequential()

model.add(Embedding(vocab_size,
                    embedding_vector_length,
                    input_length=review_length))

# Embedding layer feeds a vector of 64D into the convolutional layer.
#   The output is consolidated through a max-pool layer before feeding
#   it sequentially through to the LSTM for analysis. This should reduce
#   training time of the net. The accuracy could improve as the spacial
#   structure learning of a CNN are merged with the sequential learning
#   of an LSTM.

model.add(Convolution1D(nb_filter=64,
                        filter_length=3,
                        activation='sigmoid',
                        border_mode='same'))
model.add(MaxPooling1D(pool_length=2))
model.add(LSTM(200))
model.add(Dense(1, activation='sigmoid'))

# Compile model and fit to data
model.compile(loss='binary_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

print(model.summary())
model.fit(X_train, Y_train, validation_data=(X_test, Y_test),
          nb_epoch=5, batch_size=32)

# Display accuracy
evaluation = model.evaluate(X_test, Y_test)
print("Accuracy %0.2f%%" % (evaluation[1] * 100))